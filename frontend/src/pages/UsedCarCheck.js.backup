import React, { useState, useEffect } from 'react';
import {
  Box,
  Container,
  Heading,
  VStack,
  Button,
  Text,
  FormControl,
  FormLabel,
  Input,
  Textarea,
  SimpleGrid,
  Card,
  CardBody,
  CardHeader,
  Icon,
  Flex,
  Alert,
  AlertIcon,
  AlertTitle,
  AlertDescription,
  Stack,
  List,
  ListItem,
  FormHelperText,
  Select,
  Spinner,
  Badge,
  Progress,
  Tabs,
  TabList,
  TabPanels,
  Tab,
  TabPanel,
  useToast,
  RadioGroup,
  Radio
} from '@chakra-ui/react';

import { 
  FaCarAlt, 
  FaCalendarAlt, 
  FaTools,
  FaInfoCircle,
  FaHistory,
  FaClipboardCheck, 
  FaExclamationTriangle,
  FaCarCrash,
  FaGasPump,
  FaCog,
  FaEuroSign,
  FaChartLine,
  FaRegThumbsUp,
  FaRegThumbsDown,
  FaArrowLeft
} from 'react-icons/fa';

// Form component
const VehicleForm = ({ formData, setFormData, formErrors, handleSubmit, hasVin, options, loadingOptions }) => {
  const { vin, make, model, year, mileage, additionalInfo, fuelType, transmissionType, condition } = formData;
  
  console.log('VehicleForm options:', options);
  
  return (
    <form onSubmit={handleSubmit}>
      <VStack spacing={6} align="stretch">
        <FormControl>
          <FormLabel display="flex" alignItems="center" fontWeight="medium" color="text.900">
            <Icon as={FaCarAlt} mr={2} color="brand.600" />
            VIN (Vehicle Identification Number)
          </FormLabel>
          <Input
            value={vin}
            onChange={(e) => setFormData({...formData, vin: e.target.value})}
            placeholder="e.g. 1HGCM82633A123456"
            bg="white"
            borderColor="secondary.200"
            _hover={{ borderColor: "accent.500" }}
            _focus={{ borderColor: "accent.500", boxShadow: "0 0 0 1px var(--chakra-colors-accent-500)" }}
          />
          <FormHelperText color="text.700">
            If you provide a VIN, the other vehicle details become optional.
          </FormHelperText>
        </FormControl>

        <SimpleGrid columns={{ base: 1, md: 3 }} spacing={6}>
          <FormControl isRequired={!hasVin} isInvalid={formErrors.make}>
            <FormLabel display="flex" alignItems="center" fontWeight="medium" color="text.900">
              <Icon as={FaCarAlt} mr={2} color="brand.600" />
              Make {!hasVin && <Text color="red.500" ml={1}>*</Text>}
            </FormLabel>
            <Select
              value={make}
              onChange={(e) => setFormData({...formData, make: e.target.value})}
              placeholder="Select make"
              isDisabled={loadingOptions}
              bg="white"
              borderColor="secondary.200"
              _hover={{ borderColor: "accent.500" }}
              _focus={{ borderColor: "accent.500", boxShadow: "0 0 0 1px var(--chakra-colors-accent-500)" }}
            >
              {options.makes.map((make, index) => (
                <option key={index} value={make}>{make}</option>
              ))}
            </Select>
            {formErrors.make && <FormHelperText color="red.500">{formErrors.make}</FormHelperText>}
          </FormControl>
          
          <FormControl isRequired={!hasVin} isInvalid={formErrors.model}>
            <FormLabel display="flex" alignItems="center" fontWeight="medium" color="text.900">
              <Icon as={FaCarAlt} mr={2} color="brand.600" />
              Model {!hasVin && <Text color="red.500" ml={1}>*</Text>}
            </FormLabel>
            <Select
              value={model}
              onChange={(e) => setFormData({...formData, model: e.target.value})}
              placeholder="Select model"
              isDisabled={!make || loadingOptions}
              bg="white"
              borderColor="secondary.200"
              _hover={{ borderColor: "accent.500" }}
              _focus={{ borderColor: "accent.500", boxShadow: "0 0 0 1px var(--chakra-colors-accent-500)" }}
            >
              {options.models.map((model, index) => (
                <option key={index} value={model}>{model}</option>
              ))}
            </Select>
            {formErrors.model && <FormHelperText color="red.500">{formErrors.model}</FormHelperText>}
          </FormControl>
          
          <FormControl isRequired={!hasVin} isInvalid={formErrors.year}>
            <FormLabel display="flex" alignItems="center" fontWeight="medium" color="text.900">
              <Icon as={FaCalendarAlt} mr={2} color="brand.600" />
              Year {!hasVin && <Text color="red.500" ml={1}>*</Text>}
            </FormLabel>
            <Select
              value={year}
              onChange={(e) => setFormData({...formData, year: e.target.value})}
              placeholder="Select year"
              isDisabled={loadingOptions}
              bg="white"
              borderColor="secondary.200"
              _hover={{ borderColor: "accent.500" }}
              _focus={{ borderColor: "accent.500", boxShadow: "0 0 0 1px var(--chakra-colors-accent-500)" }}
            >
              {options.years.map((year, index) => (
                <option key={index} value={year}>{year}</option>
              ))}
            </Select>
            {formErrors.year && <FormHelperText color="red.500">{formErrors.year}</FormHelperText>}
          </FormControl>
        </SimpleGrid>
        
        <SimpleGrid columns={{ base: 1, md: 3 }} spacing={6}>
          <FormControl isRequired={!hasVin} isInvalid={formErrors.mileage}>
            <FormLabel display="flex" alignItems="center" fontWeight="medium" color="text.900">
              <Icon as={FaChartLine} mr={2} color="brand.600" />
              Mileage (km) {!hasVin && <Text color="red.500" ml={1}>*</Text>}
            </FormLabel>
            <Input
              type="number"
              value={mileage}
              onChange={(e) => setFormData({...formData, mileage: e.target.value})}
              placeholder="e.g. 50000"
              bg="white"
              borderColor="secondary.200"
              _hover={{ borderColor: "accent.500" }}
              _focus={{ borderColor: "accent.500", boxShadow: "0 0 0 1px var(--chakra-colors-accent-500)" }}
            />
            {formErrors.mileage && <FormHelperText color="red.500">{formErrors.mileage}</FormHelperText>}
          </FormControl>
          
          <FormControl isRequired={!hasVin} isInvalid={formErrors.fuelType}>
            <FormLabel display="flex" alignItems="center" fontWeight="medium" color="text.900">
              <Icon as={FaGasPump} mr={2} color="brand.600" />
              Fuel Type {!hasVin && <Text color="red.500" ml={1}>*</Text>}
            </FormLabel>
            <Select
              value={fuelType}
              onChange={(e) => setFormData({...formData, fuelType: e.target.value})}
              placeholder="Select fuel type"
              isDisabled={loadingOptions}
              bg="white"
              borderColor="secondary.200"
              _hover={{ borderColor: "accent.500" }}
              _focus={{ borderColor: "accent.500", boxShadow: "0 0 0 1px var(--chakra-colors-accent-500)" }}
            >
              {options.fuelTypes.map((type, index) => (
                <option key={index} value={type.id}>{type.name}</option>
              ))}
            </Select>
            {formErrors.fuelType && <FormHelperText color="red.500">{formErrors.fuelType}</FormHelperText>}
          </FormControl>
          
          <FormControl isRequired={!hasVin} isInvalid={formErrors.transmissionType}>
            <FormLabel display="flex" alignItems="center" fontWeight="medium" color="text.900">
              <Icon as={FaCog} mr={2} color="brand.600" />
              Transmission {!hasVin && <Text color="red.500" ml={1}>*</Text>}
            </FormLabel>
            <Select
              value={transmissionType}
              onChange={(e) => setFormData({...formData, transmissionType: e.target.value})}
              placeholder="Select transmission"
              isDisabled={loadingOptions}
              bg="white"
              borderColor="secondary.200"
              _hover={{ borderColor: "accent.500" }}
              _focus={{ borderColor: "accent.500", boxShadow: "0 0 0 1px var(--chakra-colors-accent-500)" }}
            >
              {options.transmissionTypes.map((type, index) => (
                <option key={index} value={type.id}>{type.name}</option>
              ))}
            </Select>
            {formErrors.transmissionType && <FormHelperText color="red.500">{formErrors.transmissionType}</FormHelperText>}
          </FormControl>
        </SimpleGrid>
        
        <FormControl>
          <FormLabel display="flex" alignItems="center" fontWeight="medium" color="text.900">
            <Icon as={FaInfoCircle} mr={2} color="brand.600" />
            Additional Information
          </FormLabel>
          <Textarea
            value={additionalInfo}
            onChange={(e) => setFormData({...formData, additionalInfo: e.target.value})}
            placeholder="Enter any additional information about the vehicle..."
            rows={4}
            bg="white"
            borderColor="secondary.200"
            _hover={{ borderColor: "accent.500" }}
            _focus={{ borderColor: "accent.500", boxShadow: "0 0 0 1px var(--chakra-colors-accent-500)" }}
          />
        </FormControl>
        
        <FormControl>
          <FormLabel display="flex" alignItems="center" fontWeight="medium" color="text.900">
            <Icon as={FaCarCrash} mr={2} color="brand.600" />
            Vehicle Condition
          </FormLabel>
          <RadioGroup 
            value={condition} 
            onChange={(value) => setFormData({...formData, condition: value})}
          >
            <Stack direction="row" spacing={5} wrap="wrap">
              <Radio value="excellent" colorScheme="green">Excellent</Radio>
              <Radio value="good" colorScheme="teal">Good</Radio>
              <Radio value="fair" colorScheme="yellow">Fair</Radio>
              <Radio value="poor" colorScheme="orange">Poor</Radio>
              <Radio value="salvage" colorScheme="red">Salvage</Radio>
            </Stack>
          </RadioGroup>
        </FormControl>
        
        <Button 
          type="submit" 
          colorScheme="accent" 
          size="lg" 
          width="full"
          leftIcon={<Icon as={FaClipboardCheck} />}
        >
          Check Vehicle
        </Button>
      </VStack>
    </form>
  );
};

// Results component
const VehicleResults = ({ formData, resetForm, checkResult }) => {
  const { vin, make, model, year, mileage, fuelType, transmissionType } = formData;
  const { analysis, market_data, recommendations } = checkResult;
  
  return (
    <VStack spacing={6} align="stretch">
      <Card bg="white" borderColor="secondary.200" boxShadow="lg" borderRadius="lg" overflow="hidden">
        <CardHeader bg="white" color="text.900">
          <Flex justifyContent="space-between" alignItems="center">
            <Heading size="md">
              <Flex align="center">
                <Icon as={FaCarAlt} mr={2} color="brand.600" />
                {vin ? `Vehicle Report for VIN: ${vin}` : `Vehicle Report for ${year} ${make} ${model}`}
              </Flex>
            </Heading>
            <Button 
              leftIcon={<Icon as={FaArrowLeft} />} 
              onClick={resetForm}
              variant="outline"
              borderColor="accent.500"
              color="accent.500"
              _hover={{ bg: "rgba(242, 169, 0, 0.1)" }}
            >
              New Check
            </Button>
          </Flex>
        </CardHeader>
        
        <CardBody>
          <VStack spacing={6} align="stretch">
            {/* Buy recommendation banner */}
            {checkResult.recommendation && (
              <Box 
                py={4} 
                px={6} 
                mb={4} 
                borderRadius="lg" 
                bg={checkResult.recommendation.recommendation === "Buy" ? "green.50" :
                    checkResult.recommendation.recommendation === "Buy with Inspection" ? "blue.50" :
                    checkResult.recommendation.recommendation === "Caution" ? "yellow.50" : "red.50"
                }
                borderWidth="1px"
                borderColor={checkResult.recommendation.recommendation === "Buy" ? "green.300" :
                    checkResult.recommendation.recommendation === "Buy with Inspection" ? "blue.300" :
                    checkResult.recommendation.recommendation === "Caution" ? "yellow.300" : "red.300"
                }
              >
                <Flex align="center" justify="space-between">
                  <Box>
                    <Heading 
                      size="md" 
                      color={checkResult.recommendation.recommendation === "Buy" ? "green.600" :
                          checkResult.recommendation.recommendation === "Buy with Inspection" ? "blue.600" :
                          checkResult.recommendation.recommendation === "Caution" ? "yellow.600" : "red.600"
                      }
                      mb={1}
                    >
                      {checkResult.recommendation.recommendation === "Buy" ? (
                        <Flex align="center">
                          <Icon as={FaRegThumbsUp} mr={2} />
                          Recommended to Buy
                        </Flex>
                      ) : checkResult.recommendation.recommendation === "Buy with Inspection" ? (
                        <Flex align="center">
                          <Icon as={FaTools} mr={2} />
                          Buy with Pre-Purchase Inspection
                        </Flex>
                      ) : checkResult.recommendation.recommendation === "Caution" ? (
                        <Flex align="center">
                          <Icon as={FaExclamationTriangle} mr={2} />
                          Proceed with Caution
                        </Flex>
                      ) : (
                        <Flex align="center">
                          <Icon as={FaRegThumbsDown} mr={2} />
                          Not Recommended
                        </Flex>
                      )}
                    </Heading>
                    <Text color="gray.700">{checkResult.recommendation.summary}</Text>
                  </Box>
                  <Box p={3} borderRadius="full" bg="white" borderWidth="2px"  
                    borderColor={checkResult.recommendation.recommendation === "Buy" ? "green.400" :
                        checkResult.recommendation.recommendation === "Buy with Inspection" ? "blue.400" :
                        checkResult.recommendation.recommendation === "Caution" ? "yellow.400" : "red.400"
                    }
                  >
                    <Text 
                      fontWeight="bold" 
                      fontSize="xl" 
                      color={checkResult.recommendation.recommendation === "Buy" ? "green.500" :
                          checkResult.recommendation.recommendation === "Buy with Inspection" ? "blue.500" :
                          checkResult.recommendation.recommendation === "Caution" ? "yellow.500" : "red.500"
                      }
                    >
                      {checkResult.recommendation.overall_score}/100
                    </Text>
                  </Box>
                </Flex>
                <Text mt={2} fontSize="sm" color="gray.600">
                  <b>Confidence:</b> {checkResult.recommendation.confidence} • <b>Based on:</b> {checkResult.sources.join(", ")}
                </Text>
              </Box>
            )}

            {/* Vehicle details */}
            <Box>
              <Heading size="sm" mb={3} color="text.900">Vehicle Details</Heading>
              <SimpleGrid columns={{ base: 1, md: 3 }} spacing={4}>
                {vin && (
                  <Box>
                    <Text fontWeight="bold" color="brand.600">VIN:</Text>
                    <Text>{vin}</Text>
                  </Box>
                )}
                <Box>
                  <Text fontWeight="bold" color="brand.600">Make:</Text>
                  <Text>{make}</Text>
                </Box>
                <Box>
                  <Text fontWeight="bold" color="brand.600">Model:</Text>
                  <Text>{model}</Text>
                </Box>
                <Box>
                  <Text fontWeight="bold" color="brand.600">Year:</Text>
                  <Text>{year}</Text>
                </Box>
                <Box>
                  <Text fontWeight="bold" color="brand.600">Mileage:</Text>
                  <Text>{mileage} km</Text>
                </Box>
                <Box>
                  <Text fontWeight="bold" color="brand.600">Fuel Type:</Text>
                  <Text>{fuelType}</Text>
                </Box>
                <Box>
                  <Text fontWeight="bold" color="brand.600">Transmission:</Text>
                  <Text>{transmissionType}</Text>
                </Box>
              </SimpleGrid>
            </Box>
            
            <Tabs colorScheme="accent" variant="enclosed">
              <TabList>
                <Tab _selected={{ color: "accent.500", borderColor: "accent.500", borderBottomColor: "transparent" }}>
                  <Icon as={FaChartLine} mr={2} />
                  Analysis
                </Tab>
                <Tab _selected={{ color: "accent.500", borderColor: "accent.500", borderBottomColor: "transparent" }}>
                  <Icon as={FaExclamationTriangle} mr={2} />
                  Issues
                </Tab>
                <Tab _selected={{ color: "accent.500", borderColor: "accent.500", borderBottomColor: "transparent" }}>
                  <Icon as={FaEuroSign} mr={2} />
                  Value
                </Tab>
                <Tab _selected={{ color: "accent.500", borderColor: "accent.500", borderBottomColor: "transparent" }}>
                  <Icon as={FaClipboardCheck} mr={2} />
                  Recommendations
                </Tab>
              </TabList>
              
              <TabPanels>
                <TabPanel>
                  <VStack spacing={4} align="stretch">
                    <Box>
                      <Heading size="sm" mb={3} color="text.900">Reliability Score</Heading>
                      <Flex align="center" mb={2}>
                        <Progress 
                          value={analysis.reliability_score.score} 
                          max={100}
                          min={0}
                          colorScheme={
                            analysis.reliability_score.score >= 80 ? "green" :
                            analysis.reliability_score.score >= 60 ? "yellow" :
                            analysis.reliability_score.score >= 40 ? "orange" : "red"
                          }
                          flex="1"
                          borderRadius="md"
                          height="10px"
                          bg="white"
                        />
                        <Text ml={4} fontWeight="bold">
                          {analysis.reliability_score.score}/100
                        </Text>
                      </Flex>
                      <Text>
                        Rating: <Badge colorScheme={
                          analysis.reliability_score.rating === "Excellent" ? "green" :
                          analysis.reliability_score.rating === "Very Good" ? "teal" :
                          analysis.reliability_score.rating === "Good" ? "blue" :
                          analysis.reliability_score.rating === "Fair" ? "yellow" : "red"
                        }>
                          {analysis.reliability_score.rating}
                        </Badge>
                      </Text>
                    </Box>

                    <Box>
                      <Heading size="sm" mb={3} color="text.900">Mileage Assessment</Heading>
                      <Alert 
                        status={
                          analysis.mileage_assessment.category === "very_high" ? "error" : 
                          analysis.mileage_assessment.category === "high" ? "warning" : 
                          analysis.mileage_assessment.category === "average" ? "info" : 
                          "success"
                        }
                        variant="left-accent"
                        borderRadius="md"
                        bg="white"
                      >
                        <AlertIcon />
                        <Box>
                          <AlertTitle>{analysis.mileage_assessment.category === "very_high" ? "Very High Mileage" : 
                                      analysis.mileage_assessment.category === "high" ? "High Mileage" : 
                                      analysis.mileage_assessment.category === "average" ? "Average Mileage" : 
                                      "Low Mileage"}</AlertTitle>
                          <AlertDescription>
                            {analysis.mileage_assessment.category === "very_high" ? 
                              `This vehicle has very high mileage (${analysis.mileage_assessment.annual_average} km/year). Extensive wear is likely.` : 
                            analysis.mileage_assessment.category === "high" ? 
                              `This vehicle has high mileage (${analysis.mileage_assessment.annual_average} km/year). Above average wear is expected.` : 
                            analysis.mileage_assessment.category === "average" ? 
                              `This vehicle has average mileage (${analysis.mileage_assessment.annual_average} km/year). Normal wear is expected.` : 
                              `This vehicle has low mileage (${analysis.mileage_assessment.annual_average} km/year). Less wear than average is expected.`}
                          </AlertDescription>
                        </Box>
                      </Alert>
                    </Box>
                  </VStack>
                </TabPanel>

                <TabPanel>
                  <Box>
                    <Heading size="sm" mb={3} color="text.900">Known Issues</Heading>
                    {analysis.common_issues.length > 0 ? (
                      <List spacing={3}>
                        {analysis.common_issues.map((issue, index) => (
                          <ListItem key={index}>
                            <Alert 
                              status="warning"
                              variant="left-accent"
                              borderRadius="md"
                              bg="white"
                            >
                              <AlertIcon />
                              <Box>
                                <AlertTitle>Potential Issue</AlertTitle>
                                <AlertDescription>{issue}</AlertDescription>
                              </Box>
                            </Alert>
                          </ListItem>
                        ))}
                      </List>
                    ) : (
                      <Text>No common issues reported for this vehicle.</Text>
                    )}
                  </Box>
                </TabPanel>

                <TabPanel>
                  <VStack spacing={4} align="stretch">
                    <Box>
                      <Heading size="sm" mb={3} color="text.900">Market Value</Heading>
                      <Stat>
                        <StatLabel>Estimated value in {market_data.market_region}</StatLabel>
                        <StatNumber>
                          <Text fontSize="2xl" fontWeight="bold" color="brand.600">
                            €{market_data.price_estimation.estimated_price.toLocaleString()}
                          </Text>
                        </StatNumber>
                        <StatHelpText>
                          Range: €{market_data.price_estimation.price_range.low.toLocaleString()} - €{market_data.price_estimation.price_range.high.toLocaleString()}
                        </StatHelpText>
                      </Stat>
                    </Box>

                    <Box>
                      <Heading size="sm" mb={3} color="text.900">Price Factors</Heading>
                      <SimpleGrid columns={{ base: 1, md: 2 }} spacing={4}>
                        <Box>
                          <Text fontWeight="bold">Age Factor:</Text>
                          <Text>{market_data.price_estimation.factors.age_factor}</Text>
                        </Box>
                        <Box>
                          <Text fontWeight="bold">Mileage Factor:</Text>
                          <Text>{market_data.price_estimation.factors.mileage_factor}</Text>
                        </Box>
                        <Box>
                          <Text fontWeight="bold">Fuel Type Factor:</Text>
                          <Text>{market_data.price_estimation.factors.fuel_factor}</Text>
                        </Box>
                        <Box>
                          <Text fontWeight="bold">Transmission Factor:</Text>
                          <Text>{market_data.price_estimation.factors.transmission_factor}</Text>
                        </Box>
                      </SimpleGrid>
                    </Box>
                  </VStack>
                </TabPanel>

                <TabPanel>
                  <VStack spacing={4} align="stretch">
                    {/* Show point-by-point checks in priority order */}
                    {checkResult.recommendation?.details && (
                      <Box>
                        <Heading size="sm" mb={3} color="text.900">Recommended Checks</Heading>
                        <List spacing={3}>
                          {checkResult.recommendation.details
                            .filter(item => item.priority === "high")
                            .map((rec, index) => (
                              <ListItem key={index}>
                                <Alert 
                                  status="error" 
                                  variant="left-accent" 
                                  borderRadius="md" 
                                  bg="white"
                                >
                                  <Box flex="1">
                                    <Flex alignItems="center">
                                      <Icon 
                                        as={
                                          rec.type === "inspection" ? FaTools :
                                          rec.type === "maintenance" ? FaHistory :
                                          rec.type === "issue" ? FaExclamationTriangle :
                                          FaInfoCircle
                                        } 
                                        mr={2} 
                                        color="red.500" 
                                      />
                                      <AlertTitle fontWeight="bold" mr={2}>
                                        {rec.description}
                                      </AlertTitle>
                                    </Flex>
                                    {rec.impact && (
                                      <AlertDescription mt={1}>
                                        <Text fontSize="sm" color="gray.600">{rec.impact}</Text>
                                      </AlertDescription>
                                    )}
                                  </Box>
                                </Alert>
                              </ListItem>
                          ))}

                          {checkResult.recommendation.details
                            .filter(item => item.priority === "medium")
                            .map((rec, index) => (
                              <ListItem key={index}>
                                <Alert 
                                  status="warning" 
                                  variant="left-accent" 
                                  borderRadius="md" 
                                  bg="white"
                                >
                                  <Box flex="1">
                                    <Flex alignItems="center">
                                      <Icon 
                                        as={
                                          rec.type === "inspection" ? FaTools :
                                          rec.type === "maintenance" ? FaHistory :
                                          rec.type === "issue" ? FaExclamationTriangle :
                                          rec.type === "cost" ? FaEuroSign :
                                          FaInfoCircle
                                        } 
                                        mr={2} 
                                        color="orange.500" 
                                      />
                                      <AlertTitle fontWeight="bold" mr={2}>
                                        {rec.description}
                                      </AlertTitle>
                                    </Flex>
                                    {rec.impact && (
                                      <AlertDescription mt={1}>
                                        <Text fontSize="sm" color="gray.600">{rec.impact}</Text>
                                      </AlertDescription>
                                    )}
                                  </Box>
                                </Alert>
                              </ListItem>
                          ))}

                          {checkResult.recommendation.details
                            .filter(item => item.priority === "low")
                            .map((rec, index) => (
                              <ListItem key={index}>
                                <Alert 
                                  status="info" 
                                  variant="left-accent" 
                                  borderRadius="md" 
                                  bg="white"
                                >
                                  <Box flex="1">
                                    <Flex alignItems="center">
                                      <Icon 
                                        as={
                                          rec.type === "inspection" ? FaTools :
                                          rec.type === "maintenance" ? FaHistory :
                                          rec.type === "market" ? FaChartLine :
                                          FaInfoCircle
                                        } 
                                        mr={2} 
                                        color="blue.500" 
                                      />
                                      <AlertTitle fontWeight="bold" mr={2}>
                                        {rec.description}
                                      </AlertTitle>
                                    </Flex>
                                    {rec.impact && (
                                      <AlertDescription mt={1}>
                                        <Text fontSize="sm" color="gray.600">{rec.impact}</Text>
                                      </AlertDescription>
                                    )}
                                  </Box>
                                </Alert>
                              </ListItem>
                          ))}
                        </List>
                      </Box>
                    )}

                    {/* Points to check if coming from old API structure */}
                    {checkResult.recommendation?.points_to_check && (
                      <Box>
                        <Heading size="sm" mb={3} color="text.900">Points to Check</Heading>
                        <List spacing={3}>
                          {checkResult.recommendation.points_to_check.map((point, index) => (
                            <ListItem key={index}>
                              <Alert status="warning" variant="left-accent" borderRadius="md" bg="white">
                                <AlertIcon />
                                <AlertDescription>{point}</AlertDescription>
                              </Alert>
                            </ListItem>
                          ))}
                        </List>
                      </Box>
                    )}

                    {/* Support for old recommendation format */}
                    {recommendations && (
                      <>
                        {recommendations.critical && recommendations.critical.length > 0 && (
                          <Box>
                            <Heading size="sm" mb={3} color="text.900">Critical Checks</Heading>
                            <List spacing={3}>
                              {recommendations.critical.map((rec, index) => (
                                <ListItem key={index}>
                                  <Alert status="error" variant="left-accent" borderRadius="md" bg="white">
                                    <AlertIcon />
                                    <AlertDescription>{rec}</AlertDescription>
                                  </Alert>
                                </ListItem>
                              ))}
                            </List>
                          </Box>
                        )}

                        {recommendations.important && recommendations.important.length > 0 && (
                          <Box>
                            <Heading size="sm" mb={3} color="text.900">Important Checks</Heading>
                            <List spacing={3}>
                              {recommendations.important.map((rec, index) => (
                                <ListItem key={index}>
                                  <Alert status="warning" variant="left-accent" borderRadius="md" bg="white">
                                    <AlertIcon />
                                    <AlertDescription>{rec}</AlertDescription>
                                  </Alert>
                                </ListItem>
                              ))}
                            </List>
                          </Box>
                        )}

                        {recommendations.model_specific && recommendations.model_specific.length > 0 && (
                          <Box>
                            <Heading size="sm" mb={3} color="text.900">Model-Specific Checks</Heading>
                            <List spacing={3}>
                              {recommendations.model_specific.map((rec, index) => (
                                <ListItem key={index}>
                                  <Alert status="info" variant="left-accent" borderRadius="md" bg="white">
                                    <AlertIcon />
                                    <AlertDescription>{rec}</AlertDescription>
                                  </Alert>
                                </ListItem>
                              ))}
                            </List>
                          </Box>
                        )}

                        {recommendations.additional && recommendations.additional.length > 0 && (
                          <Box>
                            <Heading size="sm" mb={3} color="text.900">Additional Checks</Heading>
                            <List spacing={3}>
                              {recommendations.additional.map((rec, index) => (
                                <ListItem key={index}>
                                  <Alert status="success" variant="left-accent" borderRadius="md" bg="white">
                                    <AlertIcon />
                                    <AlertDescription>{rec}</AlertDescription>
                                  </Alert>
                                </ListItem>
                              ))}
                            </List>
                          </Box>
                        )}
                      </>
                    )}
                  </VStack>
                </TabPanel>
              </TabPanels>
            </Tabs>
          </VStack>
        </CardBody>
      </Card>
    </VStack>
  );
};

const UsedCarCheck = () => {
  // Define all state in one object for easier management
  const [formData, setFormData] = useState({
    vin: '',
    make: '',
    model: '',
    year: '',
    mileage: '',
    additionalInfo: '',
    fuelType: '',
    transmissionType: '',
    condition: ''
  });
  const [submitted, setSubmitted] = useState(false);
  const [hasVin, setHasVin] = useState(false);
  const [formErrors, setFormErrors] = useState({});
  const [loading, setLoading] = useState(false);
  const [checkResult, setCheckResult] = useState(null);
  const [options, setOptions] = useState({
    makes: [],
    models: [],
    years: [],
    fuelTypes: [],
    transmissionTypes: []
  });
  const [loadingOptions, setLoadingOptions] = useState(true);
  
  // Define all theme-related variables
  const cardBg = 'white';
  const borderColor = 'secondary.200';
  const headerBg = 'white';
  const textColor = 'text.900';
  const mutedTextColor = 'text.700';
  const toast = useToast();

  // Fetch dropdown options on component mount
  useEffect(() => {
    const fetchOptions = async () => {
      try {
        setLoadingOptions(true);
        console.log('Fetching car options...');
        const response = await fetch('http://localhost:8099/api/used-car/options');
        console.log('Response status:', response.status);
        
        if (!response.ok) {
          throw new Error(`Failed to fetch car options: ${response.status} ${response.statusText}`);
        }
        
        const data = await response.json();
        console.log('Received options data:', data);
        
        // IMPORTANT: Add fallback values if the backend returns empty data
        const fallbackMakes = [
          "Toyota", "Honda", "Ford", "BMW", "Mercedes-Benz", "Volkswagen", 
          "Audi", "Hyundai", "Kia", "Nissan", "Mazda", "Subaru"
        ];
        
        setOptions({
          makes: data.makes?.length > 0 ? data.makes : fallbackMakes,
          models: [],
          years: data.years?.length > 0 ? data.years : Array.from({ length: 30 }, (_, i) => new Date().getFullYear() - i),
          fuelTypes: data.fuelTypes?.length > 0 ? data.fuelTypes : [
            {id: "petrol", name: "Petrol"},
            {id: "diesel", name: "Diesel"},
            {id: "hybrid", name: "Hybrid"},
            {id: "electric", name: "Electric"}
          ],
          transmissionTypes: data.transmissionTypes?.length > 0 ? data.transmissionTypes : [
            {id: "manual", name: "Manual"},
            {id: "automatic", name: "Automatic"},
            {id: "semi-auto", name: "Semi-Automatic"}
          ]
        });
        
        console.log('Options set successfully');
      } catch (error) {
        console.error('Error fetching car options:', error);
        
        // If API fails, use fallback data
        toast({
          title: 'Data Loading Notice',
          description: `Using default vehicle data. ${error.message}`,
          status: 'warning',
          duration: 5000,
          isClosable: true,
        });
        
        // Set fallback options
        setOptions({
          makes: ["Toyota", "Honda", "Ford", "BMW", "Mercedes-Benz", "Volkswagen", 
                  "Audi", "Hyundai", "Kia", "Nissan", "Mazda", "Subaru"],
          models: [],
          years: Array.from({ length: 30 }, (_, i) => new Date().getFullYear() - i),
          fuelTypes: [
            {id: "petrol", name: "Petrol"},
            {id: "diesel", name: "Diesel"},
            {id: "hybrid", name: "Hybrid"},
            {id: "electric", name: "Electric"}
          ],
          transmissionTypes: [
            {id: "manual", name: "Manual"},
            {id: "automatic", name: "Automatic"},
            {id: "semi-auto", name: "Semi-Automatic"}
          ]
        });
      } finally {
        setLoadingOptions(false);
      }
    };
    
    fetchOptions();
  }, [toast]);

  // Update models when make changes
  useEffect(() => {
    // If make changes, filter models relevant to the selected make
    if (formData.make && options.makes.includes(formData.make)) {
      // Set relevant models based on the selected make
      // In a real implementation, we'd fetch this from the API
      const fallbackModelsByMake = {
        "BMW": ["3 Series", "5 Series", "X3", "X5", "7 Series"],
        "Mercedes-Benz": ["C-Class", "E-Class", "S-Class", "GLC", "GLE"],
        "Volkswagen": ["Golf", "Passat", "Tiguan", "Jetta", "Atlas"],
        "Audi": ["A3", "A4", "Q5", "Q7", "A6"],
        "Hyundai": ["Elantra", "Sonata", "Tucson", "Santa Fe", "Kona"],
        "Kia": ["Forte", "Optima", "Sportage", "Sorento", "Soul"],
        "Toyota": ["Corolla", "Camry", "RAV4", "Highlander", "4Runner"],
        "Honda": ["Civic", "Accord", "CR-V", "Pilot", "Odyssey"],
        "Ford": ["Focus", "Fusion", "Escape", "Explorer", "F-150"]
      };
      
      const models = fallbackModelsByMake[formData.make] || [];
      setOptions(prev => ({ ...prev, models }));
    } else {
      // Reset models if no make is selected
      setOptions(prev => ({ ...prev, models: [] }));
            "Ford": ["F-150", "Mustang", "Explorer", "Escape", "Focus"],
            "BMW": ["3 Series", "5 Series", "X3", "X5", "7 Series"],
            "Mercedes-Benz": ["C-Class", "E-Class", "S-Class", "GLC", "GLE"],
            "Volkswagen": ["Golf", "Passat", "Tiguan", "Jetta", "Atlas"],
            "Audi": ["A3", "A4", "Q5", "Q7", "A6"],
            "Hyundai": ["Elantra", "Sonata", "Tucson", "Santa Fe", "Kona"],
            "Kia": ["Forte", "Optima", "Sportage", "Sorento", "Soul"]
          }
        }
      }
    }
  }, [formData.vin]);

  // Form validation logic
  const validateForm = () => {
    const errors = {};

    if (!hasVin) {
      if (!formData.make) errors.make = "Make is required";
      if (!formData.model) errors.model = "Model is required";
      if (!formData.year) errors.year = "Year is required";
      if (!formData.mileage) errors.mileage = "Mileage is required";
      if (!formData.fuelType) errors.fuelType = "Fuel type is required";
      if (!formData.transmissionType) errors.transmissionType = "Transmission type is required";
    }

    return errors;
  };

  // Fetch car options with error handling and fallbacks
  const fetchCarOptions = async () => {
    setLoadingOptions(true);
    try {
      const response = await fetch('/api/used-car/options');
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const data = await response.json();
      setOptions(data);
    } catch (error) {
      console.error("Error fetching car options:", error);
      toast({
        title: "Error",
        description: "Failed to load vehicle options. Please try again later.",
        status: "error",
        duration: 5000,
        isClosable: true,
      });
      // Set fallback data for a better user experience
      setOptions({
        makes: ['BMW', 'Toyota', 'Volkswagen', 'Honda', 'Ford', 'Mercedes-Benz', 'Audi'],
        models: [],
        years: Array.from({ length: 30 }, (_, i) => new Date().getFullYear() - i),
        fuelTypes: [
          { id: 'petrol', name: 'Petrol' },
          { id: 'diesel', name: 'Diesel' },
          { id: 'hybrid', name: 'Hybrid' },
          { id: 'electric', name: 'Electric' },
          { id: 'lpg', name: 'LPG' }
        ],
        transmissionTypes: [
          { id: 'manual', name: 'Manual' },
          { id: 'automatic', name: 'Automatic' },
          { id: 'semi-auto', name: 'Semi-Automatic' },
          { id: 'cvt', name: 'CVT' }
        ]
      });
    } finally {
      setLoadingOptions(false);
    }
  };

  // Load options when component mounts
  useEffect(() => {
    fetchCarOptions();
  }, []);

  // Handle form submission with better error handling
  const handleSubmit = async (e) => {
    e.preventDefault();

    // Validate form
    const errors = validateForm();
    setFormErrors(errors);

    if (Object.keys(errors).length > 0) return;

    setLoading(true);
    try {
      const payload = {
        vin: formData.vin,
        make: formData.make,
        model: formData.model,
        year: parseInt(formData.year, 10),
        mileage: parseInt(formData.mileage, 10),
        fuel_type: formData.fuelType,
        transmission: formData.transmissionType,
        condition: formData.condition || 'good'
      };

      const response = await fetch('/api/used-car/check', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload),
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);
      }

      const result = await response.json();
      setCheckResult(result);
      setSubmitted(true);
    } catch (error) {
      console.error("Error checking used car:", error);
      toast({
        title: "Error",
        description: "Failed to perform vehicle check. Please try again later.",
        status: "error",
        duration: 5000,
        isClosable: true,
      });
    } finally {
      setLoading(false);
    }
  };

  // Reset form and go back to input screen
  const resetForm = () => {
    setFormData({
      vin: '',
      make: '',
      model: '',
      year: '',
      mileage: '',
      additionalInfo: '',
      fuelType: '',
      transmissionType: '',
      condition: ''
    });
    setSubmitted(false);
    setCheckResult(null);
    setFormErrors({});
  };

  return (
    <Container maxW="container.xl" py={8}>
      <Box
        p={6}
        bg="gray.50"
        borderRadius="lg"
        minH="calc(100vh - 200px)"
      >
        <VStack spacing={8} align="stretch">
          <Heading as="h1" size="xl" mb={2} color="brand.700" textAlign="center">
            <Flex align="center" justify="center">
              <Icon as={FaCarAlt} mr={3} />
              Used Car Check
            </Flex>
          </Heading>
          <Text color="text.700" textAlign="center" fontSize="lg">
            Check the reliability, common issues, and value of a used car before buying
          </Text>

          {loading && (
            <Flex justify="center" align="center" minH="300px" direction="column">
              <Spinner size="xl" color="accent.500" thickness="4px" speed="0.65s" mb={4} />
              <Text>Analyzing vehicle data...</Text>
            </Flex>
          )}

          {!loading && !submitted && (
            <Card bg="white" borderColor="secondary.200" boxShadow="md" borderRadius="lg">
              <CardHeader bg="brand.50" borderBottomWidth="1px" borderBottomColor="secondary.200">
                <Heading size="md" color="brand.700">
                  <Flex align="center">
                    <Icon as={FaClipboardCheck} mr={2} />
                    Vehicle Details
                  </Flex>
                </Heading>
              </CardHeader>
              <CardBody p={6}>
                <VehicleForm
                  formData={formData}
                  setFormData={setFormData}
                  formErrors={formErrors}
                  handleSubmit={handleSubmit}
                  hasVin={hasVin}
                  options={options}
                  loadingOptions={loadingOptions}
                />
              </CardBody>
            </Card>
          )}

          {!loading && submitted && checkResult && (
            <VehicleResults
              formData={formData}
              resetForm={resetForm}
              checkResult={checkResult}
            />
          )}
        </VStack>
      </Box>
    </Container>
  );
};

export default UsedCarCheck;
